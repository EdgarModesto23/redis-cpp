#include "types.hpp"
#include <spdlog/spdlog.h>
#include <string>
#include <vector>

namespace types {
std::vector<char> types::SimpleString::to_bytes() const {
  std::vector<char> result;
  result.push_back('+');
  result.insert(result.end(), data_.begin(), data_.end());
  result.push_back('\r');
  result.push_back('\n');
  return result;
}

std::vector<char> types::BulkString::to_bytes() const {
  std::vector<char> result;
  result.push_back('$');

  auto data_len = data_.length();
  auto len = std::to_string(data_len > 0 ? data_.length() : -1);
  spdlog::debug(len);
  result.insert(result.end(), len.begin(), len.end());
  result.push_back('\r');
  result.push_back('\n');
  if (data_len > 0) {
    result.insert(result.end(), data_.begin(), data_.end());
    result.push_back('\r');
    result.push_back('\n');
  }
  return result;
}

std::vector<char> types::ErrorString::to_bytes() const {
  std::vector<char> result;
  result.push_back('-');
  type_ == ERR ? result.insert(result.end(), {'E', 'R', 'R', ' '})
               : result.insert(result.end(), {'W', 'R', 'O', 'N', 'G', 'T', 'Y',
                                              'P', 'E', ' '});
  result.insert(result.end(), data_.begin(), data_.end());
  result.push_back('\r');
  result.push_back('\n');
  return result;
}
} // namespace types
